/**
 * File name: DBOperations.java
 * Author: Liying Guo, 040858257
 * Course: CST8288 OOP with Design Patterns
 * Assignment: Assignment2
 * Date: 2024-02-17
 * Professor: Gustavo Adami
 * Purpose: DBOperations is conduct sql execution
 */
package com.algonquin.cst8288.assignment2.database;

import com.algonquin.cst8288.assignment2.event.Event;
import com.algonquin.cst8288.assignment2.event.EventType;
import com.algonquin.cst8288.assignment2.event.factory.EventCreator;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
/**
 * This class is used for creating, retrieving, updating, and 
 * deleting a specific Event object generated by the Client class; 
 * I will create a separate class to handle the interaction between Client and Factory???
 * @author Liying Guo
 * @version 1.0
 * @since 2024-Feb-17
 */
public class DBOperations {

        private static final String INSERT_SQL_QUERY     = "INSERT INTO events(event_name,event_description,event_activities,admission_fees) VALUES(?,?,?,?)";
        private static final String UPDATE_SQL_QUERY     = "UPDATE events SET event_name=?,event_description=?,event_activities=?,admission_fees=?, WHERE event_id=?";
        private static final String SELECT_SQL_QUERY     = "SELECT event_id,event_name,event_description,event_activities,admission_fees FROM events WHERE event_id=?";
        private static final String DELETE_SQL_QUERY     = "DELETE FROM events WHERE event_id=?";
        private static final String DELETE_ALL_SQL_QUERY = "DELETE FROM events";
	public static void createEvent(Event event) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DBConnection.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }

              con.setAutoCommit( false );
              ps = con.prepareStatement( INSERT_SQL_QUERY );
              ps.setString( 1, event.getEventName() );
              ps.setString( 2, event.getEventDescription() );
              ps.setString( 3, event.getEventActivities() );
              ps.setDouble(4, event.getAdmissionFees() );

              ps.execute();
              System.out.println( "insertEvent => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
              throw e;
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                 DBConnection.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }

        }
	public static Event retrieveEvent(int event_id) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           ResultSet rs = null;
           Event event = null;
           try
           {
              con = DBConnection.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return event;
              }
              ps = con.prepareStatement( SELECT_SQL_QUERY );
              ps.setLong( 1, event_id );
              rs = ps.executeQuery();
              System.out.println( "retriveEvent => " + ps.toString() );
              if ( rs.next() )
              {
                 event = EventCreator.build(EventType.valueOf(rs.getString( "event_name" )))
                         .eventName(rs.getString( "event_name" ))
                         .eventDescription(rs.getString( "event_description" ))
                         .eventActivities(rs.getString( "event_activities" ))
                         .admissionFees(rs.getDouble("admission_fees" ))
                         .makeEvent();
              }

           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(rs!=null)rs.close();
                  if(ps!=null)ps.close();
                  DBConnection.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
           return event;
        }

	public static void updateEvent(Event event) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;

           try
           {
              con = DBConnection.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              con.setAutoCommit( false );
              ps = con.prepareStatement( UPDATE_SQL_QUERY );
              ps.setString( 1, event.getEventName() );
              ps.setString( 2, event.getEventDescription() );
              ps.setString( 3, event.getEventActivities() );
              ps.setDouble( 4, event.getAdmissionFees() );
              ps.setInt(    5, event.getEventId() );
              ps.execute();
              System.out.println( "updateEvent => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                    throw e;
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                  DBConnection.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }

        }

	public static void deleteEvent(int event_id) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DBConnection.getInstance().getConnection();
              ps = con.prepareStatement( DELETE_SQL_QUERY );
              ps.setInt(1, event_id );
              ps.execute();
              System.out.println( "deletePerson => " + ps.toString() );
           }
           catch ( SQLException e )
           {
              throw e;
           }

           finally
           {
              try
              {
                  if(ps!=null)ps.close();
                  DBConnection.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
        
        public static void deleteAllRecords() throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DBConnection.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              ps = con.prepareStatement( DELETE_ALL_SQL_QUERY );
              ps.execute();
              System.out.println( "deleteAllRecords => " + ps.toString() );
           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(ps != null)ps.close();
                  DBConnection.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
}
